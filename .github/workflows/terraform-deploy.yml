name: "Terraform"

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Install boto3 for unit test
        run: pip3 install boto3

      - name: Lambda Function unit test
        run: python3 src/test_main.py

      - name: Create Lambda Function Payload
        run: cd src/ && zip lambda_function_payload.zip main.py && cd ..

      - name: Create Lambda Layer Payload
        run: cd package/ && zip -r lambda_layer_payload.zip python/ && cd ..

      - name: Push Lambda Function Payload to S3
        run: aws s3 cp src/lambda_function_payload.zip s3://garrettleber-tf-backend/prod/lambda-zips/lambda_function_payload.zip

      - name: Push Lambda Layer Payload to S3
        run: aws s3 cp package/lambda_layer_payload.zip s3://garrettleber-tf-backend/prod/lambda-zips/lambda_layer_payload.zip

      - name: Generate Lambda Function payload hash
        run: openssl dgst -sha256 -binary src/lambda_function_payload.zip | openssl enc -base64 | tr -d "\n" > src/lambda_function_payload.zip.base64sha256

      - name: Generate Lambda Layer payload hash
        run: openssl dgst -sha256 -binary package/lambda_layer_payload.zip | openssl enc -base64 | tr -d "\n" > package/lambda_layer_payload.zip.base64sha256

      - name: Push Lambda Function Payload hash to S3
        run: aws s3 cp --content-type text/plain src/lambda_function_payload.zip.base64sha256 s3://garrettleber-tf-backend/prod/lambda-zips/lambda_function_payload.zip.base64sha256

      - name: Push Lambda Layer Payload hash to S3
        run: aws s3 cp --content-type text/plain package/lambda_layer_payload.zip.base64sha256 s3://garrettleber-tf-backend/prod/lambda-zips/lambda_layer_payload.zip.base64sha256

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color
        continue-on-error: true

      - uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`${process.env.PLAN}\`\`\`
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        run: terraform apply -auto-approve
